group_by(Iteration,RF) %>%
summarise(lowCI = quantile(taskParam, 0.025, type = 6),
highCI = quantile(taskParam, 0.975, type = 6),
taskParam = mean(taskParam)) %>%
group_by(RF) %>%
summarise(taskParam = mean(taskParam), lowCI = mean(lowCI), highCI = mean(highCI))
CI_sd <- popParamsAll %>%
pivot_longer(names_to = "RF", values_to = "SD", cols = c(sdInt,sdExt)) %>%
group_by(Iteration,RF) %>%
summarise(lowCI = quantile(SD, 0.025, type = 6),
highCI = quantile(SD, 0.975, type = 6),
SD = mean(SD)) %>%
group_by(RF) %>%
summarise(SD = mean(SD), lowCI = mean(lowCI), highCI = mean(highCI))
CI_taskParam
participant_weights %>%
pivot_wider(names_from = RF, values_from = Weight) %>%
ggplot(aes(x=Internal, y=External, fill=Condition))+
geom_point(size = 3, shape=21)+
geom_path(arrow=arrow(type = 'closed',length = unit(0.3, "cm"), ends = 'last'),
size = 0.5, alpha = 0.3, aes(group=Participant))+
scale_fill_manual(values = c('black','blue'))+
geom_abline(slope=1,intercept=0, linetype = 'dashed')+
annotate(geom = 'text', label = 'A', x=-Inf, y=Inf, hjust = -2, vjust=2, size=7, fontface = 'bold')+
ylab('External Weight')+xlab("Internal Weight")
#this calculates a PCD score based on the predicted data and summarizes the participants actual PCD score
modelPCD <- full_join(Pivot(alldata1),
participant_weights %>%  pivot_wider(names_from = RF, values_from = Weight))%>%
mutate(Estimated = genHypothesisMLE(wInt,wExt,Hands,SOA,Condition)) %>%
gather(Type, pRfirst, Data,Estimated) %>%
select(-numTrials,-numRF) %>%
spread(key= Hands, pRfirst) %>%
group_by(Type,Participant,Condition) %>%
mutate(PCD = ifelse(SOA < 0, (Crossed - Uncrossed),(Uncrossed - Crossed))) %>%
summarize(PCD = sum(PCD)) %>%
ungroup() %>%
spread(key=Type,PCD)
#this calculates a PCD score based on the predicted data and summarizes the participants actual PCD score
modelPCD <- full_join(Pivot(alldata1),
participant_weights %>%  pivot_wider(names_from = RF, values_from = Weight)) %>%
mutate(Estimated = genHypothesisMLE(Internal,External,Hands,SOA,Condition)) %>%
gather(Type, pRfirst, Data,Estimated) %>%
select(-numTrials,-numRF) %>%
spread(key= Hands, pRfirst) %>%
group_by(Type,Participant,Condition) %>%
mutate(PCD = ifelse(SOA < 0, (Crossed - Uncrossed),(Uncrossed - Crossed))) %>%
summarize(PCD = sum(PCD)) %>%
ungroup() %>%
spread(key=Type,PCD)
modelPCD
#plots participants actual PCD score with their predicted PCD score
modelPCD %>%
ggplot(aes(x=Data, y=Estimated))+
geom_point(size = 3, shape = 21, aes(fill = Condition))+
scale_fill_manual(values = c('black','blue'))+
xlim(0,3.5)+ylim(0,3.5)+
geom_abline(slope = 1, intercept = 0)+
ylab('Estimated PCD')+xlab("True PCD")
#plots participants actual PCD score with their predicted PCD score
modelPCD %>%
ggplot(aes(x=Data, y=Estimated))+
geom_point(size = 3, shape = 21, aes(fill = Condition))+
scale_fill_manual(values = c('black','blue'))+
geom_abline(slope = 1, intercept = 0)+
ylab('Estimated PCD')+xlab("True PCD")
#plots participants actual PCD score with their predicted PCD score
modelPCD %>%
ggplot(aes(x=Data, y=Estimated))+
geom_point(size = 3, shape = 21, aes(fill = Condition))+
scale_fill_manual(values = c('black','blue'))+
xlim(0,5.5)+ylim(0,5.5)+
geom_abline(slope = 1, intercept = 0)+
ylab('Estimated PCD')+xlab("True PCD")
#summarize the true weights of each participant
trueWeights <- alldata1 %>%
group_by(Participant,Condition) %>%
summarize(Internal = mean(wInt), External = mean(wExt), Likelihood = 2) #setting a dummy likelihood to easily group the data in the graph
trueWeights
View(participant_weights)
View(trueWeights)
participant_weights <- full_join(popParamsAll, partParamsAll) %>%
mutate(B = ifelse(RF == "Internal", A*taskInt, A*taskExt)) %>%
group_by(Participant,RF) %>%
summarise(A = mean(A), B = mean(B))
participant_weights
#this calculates a PCD score based on the predicted data and summarizes the participants actual PCD score
modelPCD <- full_join(Pivot(alldata1), participant_weights) %>%
mutate(Estimated = genHypothesisMLE(Internal,External,Hands,SOA,Condition)) %>%
gather(Type, pRfirst, Data,Estimated) %>%
select(-numTrials,-numRF) %>%
spread(key= Hands, pRfirst) %>%
group_by(Type,Participant,Condition) %>%
mutate(PCD = ifelse(SOA < 0, (Crossed - Uncrossed),(Uncrossed - Crossed))) %>%
summarize(PCD = sum(PCD)) %>%
ungroup() %>%
spread(key=Type,PCD)
participant_weights
#calculates posterior means for participants
participant_weights <- full_join(popParamsAll, partParamsAll) %>%
mutate(B = ifelse(RF == "Internal", A*taskInt, A*taskExt)) %>%
group_by(Participant,RF) %>%
summarise(A = mean(A), B = mean(B)) %>%
pivot_longer(names_to = "Condition", values_to = "Weight", cols = c(A,B)) %>%
pivot_wider(names_from = RF, values_from = Weight) %>%
participant_weights
#calculates posterior means for participants
participant_weights <- full_join(popParamsAll, partParamsAll) %>%
mutate(B = ifelse(RF == "Internal", A*taskInt, A*taskExt)) %>%
group_by(Participant,RF) %>%
summarise(A = mean(A), B = mean(B)) %>%
pivot_longer(names_to = "Condition", values_to = "Weight", cols = c(A,B)) %>%
pivot_wider(names_from = RF, values_from = Weight)
participant_weights
participant_weights %>%
ggplot(aes(x=Internal, y=External, fill=Condition))+
geom_point(size = 3, shape=21)+
geom_path(arrow=arrow(type = 'closed',length = unit(0.3, "cm"), ends = 'last'),
size = 0.5, alpha = 0.3, aes(group=Participant))+
scale_fill_manual(values = c('black','blue'))+
geom_abline(slope=1,intercept=0, linetype = 'dashed')+
annotate(geom = 'text', label = 'A', x=-Inf, y=Inf, hjust = -2, vjust=2, size=7, fontface = 'bold')+
ylab('External Weight')+xlab("Internal Weight")
#this calculates a PCD score based on the predicted data and summarizes the participants actual PCD score
modelPCD <- full_join(Pivot(alldata1), participant_weights) %>%
mutate(Estimated = genHypothesisMLE(Internal,External,Hands,SOA,Condition)) %>%
gather(Type, pRfirst, Data,Estimated) %>%
select(-numTrials,-numRF) %>%
spread(key= Hands, pRfirst) %>%
group_by(Type,Participant,Condition) %>%
mutate(PCD = ifelse(SOA < 0, (Crossed - Uncrossed),(Uncrossed - Crossed))) %>%
summarize(PCD = sum(PCD)) %>%
ungroup() %>%
spread(key=Type,PCD)
#plots participants actual PCD score with their predicted PCD score
modelPCD %>%
ggplot(aes(x=Data, y=Estimated))+
geom_point(size = 3, shape = 21, aes(fill = Condition))+
scale_fill_manual(values = c('black','blue'))+
xlim(0,5.5)+ylim(0,5.5)+
geom_abline(slope = 1, intercept = 0)+
ylab('Estimated PCD')+xlab("True PCD")
rbind(trueWeights, participant_weights %>% mutate(Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Likelihood)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))+
facet_wrap(~Condition)
rbind(trueWeights, participant_weights %>% mutate(Type = 'MCMC'))
#summarize the true weights of each participant
trueWeights <- alldata1 %>%
group_by(Participant,Condition) %>%
summarize(Internal = mean(wInt), External = mean(wExt), Type = 'True') #setting a dummy likelihood to easily group the data in the graph
rbind(trueWeights, participant_weights %>% mutate(Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Likelihood)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))+
facet_wrap(~Condition)
rbind(trueWeights, participant_weights %>% mutate(Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))+
facet_wrap(~Condition)
MCMC_C <- full_join(CI, participant_weights)
MCMC_C
#summarize the true weights of each participant
trueTaskparam <- alldata1 %>%
group_by(Participant,Condition) %>%
summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'True') #setting a dummy likelihood to easily group the data in the graph
View(popParamsAll)
View(alldata1)
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC'))
#summarize the true weights of each participant
trueTaskparam <- alldata1 %>%
summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'True') #setting a dummy likelihood to easily group the data in the graph
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))+
facet_wrap(~Condition)
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
ggplot(aes(x = Internal, y = External))+
#geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
ggplot(aes(x = RF, y = Weight, fill = RF))+
#geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
ggplot(aes(x = RF, y = Weight))+
#geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
#geom_path(aes(group = Participant), color = 'grey')+
geom_point(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
#geom_path(aes(group = Participant), color = 'grey')+
geom_bar(aes(color = as.character(Type)), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
#geom_path(aes(group = Participant), color = 'grey')+
geom_bar(aes(color = RF, size = 2)+
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(aes(color = RF), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'), labels = c("Estimated Weight", "True Weight"))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(aes(color = RF), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(, size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar()+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(stat = "identity", position = "dodge")+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight))+
geom_bar(stat = "identity", position = position_dodge())+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, color = RF))+
geom_bar(stat = "identity", position = position_dodge())+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, color = Type))+
geom_bar(stat = "identity", position = position_dodge())+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge())+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge(), size = 2)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'MCMC')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge(), size = 1)+
xlab("Internal Weight")+ylab("External Weight")+
scale_color_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'Hierarchical')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge(), size = 1)+
xlab("Internal Weight")+ylab("External Weight")+
scale_fill_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'Hierarchical')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge(), size = 1)+
xlab("Type")+ylab("Task Parameter Value")+
scale_fill_manual(values = c('black','grey'))
rbind(trueTaskparam, popParamsAll %>% summarize(Internal = mean(taskInt), External = mean(taskExt), Type = 'Hierarchical')) %>%
pivot_longer(names_to = "RF", values_to = "Weight", cols = c(Internal,External)) %>%
ggplot(aes(x = RF, y = Weight, fill = Type))+
geom_bar(stat = "identity", position = position_dodge(), size = 1)+
xlab("Reference Frame")+ylab("Task Parameter Value")+
scale_fill_manual(values = c('black','grey'))
PPMC <- function(PCD_easy, pRfirst){
#480 observation (1 for each row of hypothesis), with 30 trials in it (number of trials in experiment)
pRfirst <- c(rbinom(length(hypothesis_current),numTrialsCondition,hypothesis_current))/numTrialsCondition
calcPPMC <- cbind(PCD_easy, pRfirst) %>%
group_by(Participant,Condition) %>%
spread(key = Hands, pRfirst) %>%
mutate(PCD = ifelse(SOA < 0, (Crossed - Uncrossed),(Uncrossed - Crossed))) %>%
summarize(PCD = sum(PCD)) %>%
spread(key = Condition, PCD)
A <- calcPPMC$A
B <- calcPPMC$B
A <- mean(A)
B <- mean(B)
Difference <- mean(A)
Correlation <- cor(A, B)
allPPMC <- c(A, B, Difference, Correlation)
return(allPPMC)
}
rm(list=ls())
library(tidyverse)
library(tidyfst)
library(truncnorm)
#devtools::source_gist("524eade46135f6348140") #for stat_smooth_func (calculating slope of regression line)
source("Graph functions.R")
source("Hierarchical Model functions.R")
time<-format(Sys.time(),"%b%d_%H%M%S")
path = 'Data/'
alldata1 <- read.table(paste(path,'Test Data.txt', sep = ""), header = T)
saveData = FALSE
#PPMC is a posterior predictive model check, to ensure that the model output is able to accurately estimate the raw data
runPPMC = FALSE
#PPMC is a posterior predictive model check, to ensure that the model output is able to accurately estimate the raw data
runPPMC = TRUE
# Set variables
numIterations = 1 #number of repetitions of the MCMC chain
numMCMC = 25000 #number of iterations in the MCMC chain.
burnIn = 5000 #amount to be removed
#proposal distribution standard deviation parameters
wsd <- 0.14 #proposed distribution for participant weights
musd <- 0.14 #proposed distribution for population weights
sigma_sd <- 0.06 #population sigma proposal distribution
task_sd <- 0.01 #proposal distribution for the task parameter
#summarize the data
pivot_full<-alldata1 %>%
group_by(SOA,Condition,Hands,Participant) %>%
summarise(numTrials = length(Actual), numRF = sum(Actual), Data = mean(Actual)) %>%
ungroup()
#determines number of levels of various experiment factors
numParticipants = length(unique(alldata1$Participant))
numSOA = length(unique(alldata1$SOA))
numConditions = length(unique(alldata1$Condition))
numPostures = length(unique(alldata1$Hands))
numTrialsCondition = nrow(alldata1)/numParticipants/numSOA/numConditions/numPostures
SOA <- unique(pivot_full$SOA) #levels of SOAs for hypothesis
PCD_easy <- pivot_full %>% select(-c(numRF,numTrials,Data)) #for PPMC
#create empty lists to later save with overall outputted data
popParamsAll <- list()
trialInfoAll <- list()
wIntAll <- list()
wExtAll <- list()
timer <- list()
for(i in 1:numIterations){
#emtpy lists to save chosen parameters on each trial
saved_popHyps <-list()
saved_trial <- list()
saved_wInt <- list()
saved_wExt <- list()
saved_PPMC <- list()
# Generate initial hypothesis
#set initial parameters for MCMC. This needs to be inside the first for loop so that each MCMC chain is initialized to a different random variable
minWeight = 2
maxWeight = 20
minSD = 1
maxSD = 8
minTask = 0.5
maxTask = 2.5
wInt_current <- c(P = runif(numParticipants,minWeight,maxWeight))
wExt_current <- c(P = runif(numParticipants,minWeight,maxWeight))
hyp_current_pop <- c(Internal = runif(1,minWeight,maxWeight),
External = runif(1,minWeight,maxWeight),
sdInt =runif(1,minSD,maxSD),
sdExt = runif(1,minSD,maxSD),
taskInt = runif(1,minTask,maxTask),
taskExt = runif(1,minTask,maxTask))
#calculating prior probability using a truncated normal distribution for the participants,
#and uniform prior for population weights
prior_current <- sum(log(dtruncnorm(wInt_current, 0, Inf, hyp_current_pop[1], hyp_current_pop[3])),
log(dtruncnorm(wExt_current, 0, Inf, hyp_current_pop[2], hyp_current_pop[4])),
log(ifelse(dunif(hyp_current_pop[1], 0,100) > 0, 1, 0)), #population internal
log(ifelse(dunif(hyp_current_pop[2], 0,100) > 0, 1, 0)), #population external
log(ifelse(dunif(hyp_current_pop[5], 0,10) > 0, 1, 0)), #internal task parameter
log(ifelse(dunif(hyp_current_pop[6], 0,10) > 0, 1, 0))) #external task parameter
#calculates hypothesized probabilities
hypothesis_current <- genHypothesis(wInt_current, wExt_current,
SOA,
hyp_current_pop[5], hyp_current_pop[6],
numTrialsCondition)
#calculates likelihood of the hypothesis
likelihood_current <- sum(compLikelihood(hypothesis_current, pivot_full$numTrials, pivot_full$numRF))
#calculates numerator
numerator_current <- prior_current + likelihood_current
#Comparison point
for(count in 1:numMCMC){
#proposed parameters for MCMC
wInt_propose <- c(P = rnorm(numParticipants, mean = wInt_current, sd = wsd))
wExt_propose <- c(P = rnorm(numParticipants, mean = wExt_current, sd = wsd))
hyp_propose_pop <- c(Internal = rnorm(1,mean=hyp_current_pop[1],sd=musd),
External = rnorm(1,mean=hyp_current_pop[2],sd=musd),
sdInt =rnorm(1,mean=hyp_current_pop[3],sd=sigma_sd),
sdExt = rnorm(1,mean=hyp_current_pop[4],sd=sigma_sd),
taskInt = rnorm(1,mean=hyp_current_pop[5],sd=task_sd),
taskExt = rnorm(1,mean=hyp_current_pop[6],sd=task_sd))
#calculating proposed numerator same as initial hypothesis
prior_propose <- sum(log(dtruncnorm(wInt_propose, 0, Inf, hyp_propose_pop[1], hyp_propose_pop[3])),
log(dtruncnorm(wExt_propose, 0, Inf, hyp_propose_pop[2], hyp_propose_pop[4])),
log(ifelse(dunif(hyp_propose_pop[1], 0,100) > 0, 1, 0)),
log(ifelse(dunif(hyp_propose_pop[2], 0,100) > 0, 1, 0)),
log(ifelse(dunif(hyp_propose_pop[5], 0,10) > 0, 1, 0)),
log(ifelse(dunif(hyp_propose_pop[6], 0,10) > 0, 1, 0)))
hypothesis_propose <-genHypothesis(wInt_propose, wExt_propose,
SOA,
hyp_propose_pop[5], hyp_propose_pop[6],
numTrialsCondition)
likelihood_propose <- sum(compLikelihood(hypothesis_propose, pivot_full$numTrials, pivot_full$numRF))
numerator_propose <- prior_propose + likelihood_propose
#comparing hypotheses
ratio = exp(numerator_propose - numerator_current)
probability <- ifelse(ratio > 1, 1, rbinom(1,1,ratio))
#if the p(comparison) > p(original) then  probability of jumping = 1
#if p(comparison) < p(original) then jump with probably = ratio
#so, jump if ratio > 1, OR if coin flip favours a jump
if(probability){
#overwrites all the current lists with the proposed lists
wInt_current <- wInt_propose
wExt_current <- wExt_propose
hyp_current_pop <- hyp_propose_pop
prior_current <- prior_propose
hypothesis_current <- hypothesis_propose
likelihood_current <- likelihood_propose
numerator_current <- numerator_propose
result = 'Jump'
} else{
result <- 'Stay'
}
#PPMC
#run only on the final MCMC run, and if runPPMC is set to TRUE
if(runPPMC && i == numIterations){
allPPMC<-PPMC(PCD_easy, pRfirst)
saved_PPMC[[count]] <- allPPMC
}
#Putting all the trial data in 1 list
trial_info <- c(prior = prior_current, likelihood = likelihood_current, numerator = numerator_current, result = result)
#adds parameters of the more probable hypothesis on each trial to list
saved_popHyps[[count]] <- hyp_current_pop
saved_trial[[count]] <- trial_info
saved_wInt[[count]] <- wInt_current
saved_wExt[[count]] <- wExt_current
}
#Converting saved data lists to tibble
saved_popHyps <- do.call(bind_rows, saved_popHyps) %>%
mutate(Iteration = i, Trial = 1:numMCMC)
saved_trial <- do.call(bind_rows, saved_trial) %>%
mutate(Iteration = i, Trial = 1:numMCMC)
saved_wInt <- do.call(bind_rows, saved_wInt) %>%
mutate(Iteration = i, Trial = 1:numMCMC)
saved_wExt <- do.call(bind_rows, saved_wExt) %>%
mutate(Iteration = i, Trial = 1:numMCMC)
#Saving each iteration as a list
popParamsAll[[i]] <- saved_popHyps
trialInfoAll[[i]] <- saved_trial
wIntAll[[i]] <- saved_wInt
wExtAll[[i]] <- saved_wExt
}
#Converting saved data of each iteration to tibble
popParamsAll <- do.call(bind_rows,popParamsAll)
trialInfoAll <- do.call(bind_rows, trialInfoAll)
wIntAll <- do.call(bind_rows, wIntAll) %>%
mutate(RF = "Internal")
wExtAll <- do.call(bind_rows, wExtAll) %>%
mutate(RF = "External")
#joining participant internal and external weights together
partParamsAll <- rbind(wIntAll,wExtAll)
colNames <- c(1:numParticipants,"Iteration","Trial","RF")
names(partParamsAll)<-colNames
partParamsAll <- partParamsAll %>%
pivot_longer(names_to = "Participant", values_to = "A", cols = 1:numParticipants)
saveRDS(popParamsAll, paste(path,"Population Parameters.rds",sep = ""), compress = "xz")
saveRDS(trialInfoAll, paste(path,"Trial Info.rds", sep = ""), compress = "xz")
saveRDS(partParamsAll, paste(path,"Participant Parameters.rds", sep = ""), compress = "xz")
if(runPPMC && i == numIterations){
PPMC <- do.call(bind_rows, saved_PPMC) %>%
mutate(Iteration = i, Trial = 1:numMCMC)
saveRDS(PPMC, paste(path,"PPMC.rds", sep = ""), compress = "xz")
}
